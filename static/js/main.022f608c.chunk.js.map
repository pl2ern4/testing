{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","state","setState","useEffect","fetch","headers","then","res","json","getValue","params","content","text","className","offers","map","obj","key","rank","product","contractTerm","downloadSpeed","uploadSpeed","remarks","o","k","tooltip","header","campaign","campaignSavings","onClick","provider","logoUrl","window","open","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA6EeA,MA1Ef,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,KAoBb,GAlBAC,qBAAU,WAKRC,MAAM,aACF,CACAC,QAAS,CACP,eAAgB,sBAKnBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJL,EAASK,QAEZ,KACEN,EACH,OAAO,KAGT,IAAMQ,EAAW,SAAAC,GAAM,oBAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAQC,eAAZ,aAAI,EAAiBC,MAI5C,OACE,qBAAKC,UAAU,MAAf,SAEIZ,EAAMa,OAAOC,KAAI,SAACC,EAAKC,GAAN,OACf,sBAAKJ,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBG,EAAIE,KAA3B,OACA,sBAAML,UAAU,cAAhB,SAA+BJ,EAASO,EAAIG,WAC5C,sBAAKN,UAAU,YAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,OAAf,sBACA,sBAAKA,UAAU,UAAf,UACE,yCACA,+BAAOJ,EAASO,EAAII,aAAaC,uBAGrC,sBAAKR,UAAU,gBAAf,UACE,qBAAKA,UAAU,OAAf,oBACA,sBAAKA,UAAU,UAAf,UACE,yCACA,+BAAOJ,EAASO,EAAII,aAAaE,wBAIvC,oBAAIT,UAAU,SAAd,SACGG,EAAIO,QAAQR,KAAI,SAACS,EAAGC,GAAJ,OAAU,6BAAgCD,EAAEb,QAAQe,QAAQC,QAAlD,iBAAmBV,EAAnB,YAA0BQ,SAEvD,sBAAKZ,UAAU,OAAf,UACE,8BACGJ,EAASO,EAAIY,SAASC,mBAEzB,8BACE,yBAAQC,SAjCFpB,EAiCuBM,EAAIe,SAASC,QAjC1B,kBAAMC,OAAOC,KAAKxB,KAiClC,UACE,4CACSD,EAASO,EAAIe,aAErB,cA/BT,eAAkCd,IANtB,IAAAP,QCjBPyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.022f608c.chunk.js","sourcesContent":["import './App.scss';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [state, setState] = useState();\n  useEffect(() => {\n    /**\n     * fetch method can be move to differet file with the header\n     * if there are more than one call\n     */\n    fetch('/data.json'\n      , {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n\n      }\n    )\n      .then(res => res.json())\n      .then(res => {\n        setState(res);\n      })\n  }, []);\n  if (!state) {\n    return null;\n  }\n\n  const getValue = params => params?.content?.text;\n\n  const handleClick = params => () => window.open(params);\n\n  return (\n    <div className=\"App\">\n      {\n        state.offers.map((obj, key) => (\n          <div className=\"row\" key={`data-${key}`}>\n            <div className=\"rank\">{obj.rank}.</div>\n            <span className=\"teriff-name\">{getValue(obj.product)}</span>\n            <div className=\"streaming\">\n              <div className=\"option download\">\n                <div className=\"text\">Download</div>\n                <div className=\"content\">\n                  <div>&darr;</div>\n                  <span>{getValue(obj.contractTerm.downloadSpeed)}</span>\n                </div>\n              </div>\n              <div className=\"option upload\">\n                <div className=\"text\">Upload</div>\n                <div className=\"content\">\n                  <div>&uarr;</div>\n                  <span>{getValue(obj.contractTerm.uploadSpeed)}</span>\n                </div>\n              </div>\n            </div>\n            <ul className=\"teriff\">\n              {obj.remarks.map((o, k) => <li key={`teriff-${key}-${k}`}>{o.content.tooltip.header}</li>)}\n            </ul>\n            <div className=\"rate\">\n              <div>\n                {getValue(obj.campaign.campaignSavings)}\n              </div>\n              <div>\n                <button onClick={handleClick(obj.provider.logoUrl)}>\n                  <span>\n                    {`To ${getValue(obj.provider)}`}\n                  </span>\n                  {'>'}\n                </button>\n              </div>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}